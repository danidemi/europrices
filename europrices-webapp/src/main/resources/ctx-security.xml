<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd 
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        ">

	<security:debug />
	
	<!--  
	<security:http security="none" >
	</security:http>
	-->
	
  
	<security:http  authentication-manager-ref="securityAuthenticationManager">	
		
		<security:custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />
		
		<security:form-login 
			default-target-url="/"
			login-page="/app/account/signin" 
			authentication-failure-url="/app/account/signin?param.error=bad_credentials"
			login-processing-url="/j_spring_security_check"
			username-parameter="username"
			password-parameter="password" 
		/>
		<security:anonymous enabled="true" username="anonymousUser" granted-authority="ROLE_ANONYMOUS" />
		<security:logout 
			logout-url="/j_spring_security_logout"
			logout-success-url="/app/account/signout"
		/>
	</security:http>

	
	
	<!-- this is to enable expressions in JSPs -->
	<bean id="webSecurityExpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
	</bean> 	
	
	
	<security:authentication-manager alias="securityAuthenticationManager">
	
		<!-- tries to authorize through username / password -->
		<security:authentication-provider>
				
			<!-- this is a default jdbc based DAO 
			-->
			<!--  
			<security:jdbc-user-service data-source-ref="dataSource"/>
			-->
						
			<security:user-service>
				<security:user name="demo" password="demo" authorities="ROLE_USER" disabled="false" locked="false"/>
			</security:user-service>
		</security:authentication-provider>
		
		<!-- tries to authorize through db 
		<security:authentication-provider ref="securityDbAuthenticationProvider" />
		-->
		
		<security:authentication-provider ref="securityDbAuthenticationProvider"/>
		
		<!-- tries to authorize through social login -->
		<security:authentication-provider ref="socialAuthenticationProvider" />
		
	</security:authentication-manager>
	
	<!--  
	-->
	<bean id="securityDbAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="securityDbAuthenticationManager" />
		<property name="passwordEncoder" ref="securityPasswordEncoder" />
	</bean>
	
	
	<!--  
	<bean id="securityDbAuthenticationManager" class="org.springframework.security.provisioning.JdbcUserDetailsManager">
		<property name="dataSource" ref="dataSource" />
		<property name="enableAuthorities" value="true" />
		<property name="enableGroups" value="false" />
		<property name="rolePrefix" value="" />
	</bean>
	-->
	
	<!-- This version just supports security users -->
	<!--  
	<bean id="securityDbAuthenticationManager" class="com.danidemi.jlubricant.org.springframework.security.provisioning.JdbcUserDetailsManager">
		<property name="dataSource" ref="dataSource" />
		<property name="enableAuthorities" value="true" />
		<property name="enableGroups" value="false" />
		<property name="rolePrefix" value="" />
		<property name="passwordEncoder" ref="securityPasswordEncoder" />
	</bean>	
	-->
	
	<!-- This version also supports social users -->
	<bean id="securityDbAuthenticationManager" class="com.danidemi.jlubricant.org.springframework.social.security.SocialUserDetailsService">
		<property name="dataSource" ref="dataSource" />
		<property name="enableAuthorities" value="true" />
		<property name="enableGroups" value="false" />
		<property name="rolePrefix" value="" />
		<property name="passwordEncoder" ref="securityPasswordEncoder" />
	</bean>		
	
	<bean id="securityPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
	</bean>
	
	<bean id="socialConnectController" class="org.springframework.social.connect.web.ConnectController">
	</bean>

	<!--  
	UsersConnectionRepository that uses the JDBC API to persist connection data to a relational 
 	database. The supporting schema is defined in JdbcUsersConnectionRepository.sql. 	
	-->
	<bean id="socialRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository" lazy-init="false">

		<!-- DataSource --> 
		<constructor-arg ref="dataSource"/>

		<!-- ConnectionFactoryLocator -->
		<constructor-arg ref="socialConnectionFactoryLocator" />

		<!-- TextEncryptor textEncryptor -->
		<constructor-arg>
			<bean class="com.danidemi.jlubricant.org.springframework.security.crypto.encrypt.VerifiedTextEncryptor">
				<constructor-arg>
					<!--  
					<bean class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="queryableText">
						<!- - password - -><constructor-arg value="aes-password" />
						<!- - 16 exh char string salt - -><constructor-arg value="30313233343536F4" />
					</bean>
					-->
					<!--  
					<bean class="org.springframework.security.crypto.encrypt.Encryptors" factory-method="noOpText">
					</bean>
					-->
					<bean class="com.danidemi.jlubricant.org.springframework.security.crypto.encrypt.TinyAESTextEncryptor">
						<constructor-arg value="0123456776543210"/>
					</bean>
				</constructor-arg>
			</bean>
			<!--  
			<bean class="org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor">
				<constructor-arg>
					<bean class="org.springframework.security.crypto.encrypt.AesBytesEncryptor">
						<constructor-arg value="aes-password" />
						<constructor-arg value="ABCD1234" />
					</bean>
				</constructor-arg>
			</bean>
			-->
		</constructor-arg>
		<property name="tablePrefix" value="" />
		<property name="connectionSignUp">
			<bean class="com.danidemi.europrice.web.controller.SimpleConnectionSignUp">
				<constructor-arg ref="securityDbAuthenticationManager" />
			</bean>
		</property>
	</bean>
	
	<!-- 
	This is a request scoped bean that is the repository that can be used to access a specific user social connections.
	The user is the one contained in the request: request.userPrincipal.name
	-->
	<bean id="socialUserConnectionRepository" factory-method="createConnectionRepository" factory-bean="socialRepository" scope="request">
	    <constructor-arg value="#{request.userPrincipal.name}" />
	    <aop:scoped-proxy proxy-target-class="false" />
	</bean>
	
	<bean id="socialConnectionFactoryLocator" class="org.springframework.social.security.SocialAuthenticationServiceRegistry" >
		<property name="authenticationServices">
			<list>
				<bean class="org.springframework.social.twitter.security.TwitterAuthenticationService">
					<constructor-arg value="${europrices.secrets.twitter.api.key}" />
					<constructor-arg value="${europrices.secrets.twitter.api.secret}" />
				</bean>
				<bean class="org.springframework.social.facebook.security.FacebookAuthenticationService">
					<constructor-arg value="${europrices.secrets.facebook.api.appId}" />
					<constructor-arg value="${europrices.secrets.facebook.api.appSecret}" />					
				</bean>
			</list>
		</property>
	</bean>

	<bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
		<constructor-arg index="0" ref="securityAuthenticationManager" />
		<constructor-arg index="1" ref="socialIdSource" />
		<constructor-arg index="2" ref="socialRepository" />
		<constructor-arg index="3" ref="socialConnectionFactoryLocator" /> 
		<property name="signupUrl" value="/app/account/socialsignin" />
	</bean>
	
	<bean id="socialIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource" />
		
	<bean id="socialAuthenticationProvider" class="org.springframework.social.security.SocialAuthenticationProvider">
		<constructor-arg ref="socialRepository" />
		<constructor-arg ref="securityDbAuthenticationManager" />
	</bean>

</beans>