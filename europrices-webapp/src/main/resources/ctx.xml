<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd 
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd       
        ">

	<context:property-placeholder order="1" location="classpath:config.xml" />
	<!-- 
		'secrets' is expected to be provided from the command line via -D.
		This way there is no need to share secrets on a public scm.
	-->        
	<context:property-placeholder order="2" location="${secrets}" />

	<!-- ========================================================== -->
	<!-- Database                                                   -->
	<!-- ========================================================== -->
	<!-- Defaults to db/migration -->
	<bean id="flyway" class="org.flywaydb.core.Flyway" init-method="migrate" depends-on="dbms">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- ========================================================== -->
	<!-- ORM & Model                                                -->
	<!-- ========================================================== -->
	
	<!-- the name 'entityManagerFactory' is mandatory to made it available to spring-data repos -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		depends-on="dataSource, flyway">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan" value="com.danidemi.europrice.db" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<!-- http://docs.jboss.org/hibernate/core/3.3/reference/en/html/session-configuration.html#configuration-optional -->
				<!-- validate | update | create | create-drop -->
				<prop key="hibernate.hbm2ddl.auto">validate</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
			</props>
		</property>
	</bean>

	<jpa:repositories base-package="com.danidemi.europrice.db" />

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	<tx:annotation-driven />
	
	<bean id="persistenceExceptionTranslationPostProcessor"
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
		
	<bean id="repo" class="com.danidemi.europrice.db.Repository">
	</bean>





	<!-- ========================================================== -->
	<!-- WEB MVC                                                    -->
	<!-- login-processing-url="/security-sign-in/authenticate" -->
	<!-- ========================================================== -->
	<context:annotation-config />
	<context:component-scan base-package="com.danidemi.europrice.web.controller" />
	<mvc:annotation-driven />
	
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename" value="classpath:messages/messages" />
		<property name="defaultEncoding" value="UTF-8" />
	</bean>
	
	<bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.InternalResourceView"/>
		<!--  
	    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		-->
		
	    <property name="prefix" value="/jsp/"/>
	    <property name="suffix" value=".jsp"/>
	    <property name="order" value="1" />
	</bean>
	
	<security:http>
		<security:intercept-url pattern="/app/admin/**" access="ROLE_ADMIN"/>
		<security:intercept-url pattern="/admin/**" access="ROLE_ADMIN"/>
		<security:custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />
		<security:form-login 
			login-page="/security-sign-in.html" 
			authentication-failure-url="/security-sign-in.html?param.error=bad_credentials" />
		<security:logout logout-url="/security-sign-out.html"/>
	</security:http>
	
	<bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
		<constructor-arg index="0" ref="socialAuthenticationManager" />
		<constructor-arg index="1" ref="socialIdSource" />
		<constructor-arg index="2" ref="socialRepository" />
		<constructor-arg index="3" ref="socialConnectionFactoryLocator" /> 
		<property name="signupUrl" value="/security-sign-up.html" />
	</bean>
	
	<bean id="socialIdSource" class="org.springframework.social.security.AuthenticationNameUserIdSource" />
	
	<security:authentication-manager alias="socialAuthenticationManager">
		<security:authentication-provider ref="socialAuthenticationProvider" />
	</security:authentication-manager>
	
	<bean id="socialAuthenticationProvider" class="org.springframework.social.security.SocialAuthenticationProvider">
		<constructor-arg ref="socialRepository" />
		<constructor-arg><null/></constructor-arg>
	</bean>
	
	<!--  
	<bean id="socialRepository" class="org.springframework.social.connect.mem.InMemoryUsersConnectionRepository">
		<constructor-arg ref="socialConnectionFactoryLocator" />
	</bean>
	-->
	
	<bean id="socialRepository" class="org.springframework.social.connect.jdbc.JdbcUsersConnectionRepository">
		<constructor-arg ref="dataSource"/>
		<constructor-arg ref="socialConnectionFactoryLocator" />
		<constructor-arg>
			<bean class="org.springframework.security.crypto.encrypt.HexEncodingTextEncryptor">
				<constructor-arg>
					<bean class="org.springframework.security.crypto.encrypt.AesBytesEncryptor">
						<constructor-arg value="aes-password" />
						<constructor-arg value="ABCD1234" />
					</bean>
				</constructor-arg>
			</bean>
		</constructor-arg>
	</bean>
	
	<bean id="socialConnectionFactoryLocator" class="org.springframework.social.security.SocialAuthenticationServiceRegistry" >
		<property name="authenticationServices">
			<list>
				<bean class="org.springframework.social.twitter.security.TwitterAuthenticationService">
					<constructor-arg value="${europrices.secrets.twitter.api.key}" />
					<constructor-arg value="${europrices.secrets.twitter.api.secret}" />
				</bean>
			</list>
		</property>
	</bean>
	

		<!-- 
	<security:http use-expressions="false">
 		Enables Spring Security CSRF protection 
		<security:csrf/>
 		-->
		
		 <!-- Configures the form login 
		<security:form-login
			login-page="/login.html"
			login-processing-url="/login/authenticate"
			authentication-failure-url="/login.html?error=bad_credentials"
			username-parameter="username"
			password-parameter="password"/>
			
		 -->
		<!-- Configures the logout function 
		<security:logout
			logout-url="/logout"
			logout-success-url="/admin/index.html"
			delete-cookies="JESSIONID"/>
		-->
			
		<!-- Anyone can access these urls 
		<security:intercept-url pattern="/auth/**" access="permitAll"/>
		<security:intercept-url pattern="/login.html" access="permitAll"/>
		<security:intercept-url pattern="/signin/**" access="permitAll"/>
		<security:intercept-url pattern="/signup/**" access="permitAll"/>
		<security:intercept-url pattern="/user/register/**" access="permitAll"/>
		-->
		
		<!-- The rest of our application is protected. 
		<security:intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
		<security:intercept-url pattern="/admin/**" access="hasRole('ROLE_USER')"/>
		-->
		
		<!-- Adds social authentication filter to the Spring Security filter chain. 
		<security:custom-filter ref="socialAuthenticationFilter" before="PRE_AUTH_FILTER" />
		-->
			
		
		<!--  
		<security:form-login />
		<security:openid-login  />
		<security:custom-filter ref="socialAuthenticationFilter" />
		<security:logout />
	</security:http>
		-->
	

	
		<!--  
	<security:authentication-manager alias="authenticationManager">
		<security:authentication-provider>
			<security:user-service>
				<security:user name="admin" password="admin" authorities="ROLE_ADMIN"/>
				<security:user name="http://plus.google.com/107223835396055530546" authorities="ROLE_ADMIN"/>				
			</security:user-service>
		</security:authentication-provider>
		<security:authentication-provider>
			<security:user-service id=""></security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
	
	<bean id="socialAuthenticationProvider" class="org.springframework.social.security.SocialAuthenticationProvider">
	</bean>
	
	<bean id="connectionFactoryLocator" class="org.springframework.social.connect.support.ConnectionFactoryRegistry">
	    <property name="connectionFactories">
	        <list>
	            <bean class="org.springframework.social.twitter.connect.TwitterConnectionFactory">
	                <constructor-arg value="${twitter.consumerKey}" />
	                <constructor-arg value="${twitter.consumerSecret}" />				
	            </bean>
	        </list>
	    </property>
	</bean>
				-->

	<!-- Configures the social authentication filter which integrates Spring 
		Social with Spring Security. 
	<bean id="socialAuthenticationFilter" class="org.springframework.social.security.SocialAuthenticationFilter">
		<constructor-arg index="0" ref="authenticationManager" />
		<constructor-arg index="1" ref="socialIdSource" />
		<constructor-arg index="2" ref="socialUsersConnectionRepository" />
		<constructor-arg index="3" ref="socialConnectionFactoryLocator" />
		 Sets the url of the registration form. 
		<property name="signupUrl" value="/user/register" />
	</bean>
		-->


	<!-- This bean determines the account ID of the user. The example application 
		uses the username as the account ID. 
	<bean id="socialIdSource"
		class="org.springframework.social.security.AuthenticationNameUserIdSource" />
		
	<bean id="socialUsersConnectionRepository" class="org.springframework.social.connect.mem.InMemoryUsersConnectionRepository" >
		<constructor-arg ref="socialConnectionFactoryLocator" />
	</bean>
	
	<bean id="socialConnectionFactoryLocator" class="org.springframework.social.security.SocialAuthenticationServiceRegistry" />
		-->
		
		



	<!-- ========================================================== -->
	<!-- Web                                                        -->
	<!-- ========================================================== -->
	<bean name="js" class="com.danidemi.jlubricant.embeddable.jetty.EmbeddableJetty" init-method="start" destroy-method="stop">
		<!--  
		<property name="dirAllowed" value="${europrices.http.dirAllowed}" />
		<property name="dispatcherServletSubPath" value="/app/*" />
		-->
		<property name="httpPort" value="${europrices.http.port}" />
		<property name="host" value="${europrices.http.host}" />
		<!--  
		<property name="virtualHosts"><null /></property> 
		-->
		<!--  
		value="${europrices.http.virtualHosts}" />  
		<property name="webappContextPath" value="/" />
		-->
		<property name="features">
			<list>
				<bean class="com.danidemi.jlubricant.embeddable.jetty.WebAppFeature">
					<constructor-arg value="${europrices.http.virtualHosts}" />
					<constructor-arg value="/" />
					<constructor-arg value="${europrices.http.dirAllowed}" />
				</bean>
				<bean class="com.danidemi.jlubricant.embeddable.jetty.SpringFeature" />
				<bean class="com.danidemi.jlubricant.embeddable.jetty.SpringSecurityFeature" />
				<bean class="com.danidemi.jlubricant.embeddable.jetty.LessFeature" />
				<bean class="com.danidemi.jlubricant.embeddable.jetty.SpringDispatcherServletFeature">
					<constructor-arg value="/app/*" />
				</bean>
			</list>
		</property>
	</bean>
	
	
	<!-- ========================================================== -->
	<!-- Scraping                                                   -->
	<!-- ========================================================== -->
	
	<bean id="callback" class="com.danidemi.europrice.tasks.TransactionScrapedProductCallback">
		<property name="commitInterval" value="10" />
		<property name="txManager" ref="transactionManager" />
		<property name="delegate">
			<bean class="com.danidemi.europrice.tasks.StoreOnDbScrapedProductCallback" />
		</property>				
	</bean>	





	<beans profile="test">
	
		<alias name="dataSource" alias="dbms"/>
		<jdbc:embedded-database type="HSQL" id="dataSource" />
		<bean name="trigger" class="com.danidemi.jlubricant.spring.context.trigger.NeverTrigger" />

	</beans>
	
	<beans profile="prod">

		<bean id="dbms" class="com.danidemi.jlubricant.embeddable.hsql.HsqlDbms"
			init-method="start" destroy-method="stop">
			<property name="port" value="${europrices.db-engine.port}" />
			<property name="ip" value="${europrices.db-engine.address}" />
			<property name="databases" ref="dataSource" />
		</bean>
		
		<bean id="dataSource" class="com.danidemi.jlubricant.embeddable.hsql.HsqlDatabase">
			<property name="dbName" value="europrices" />
			<property name="password" value="${europrices.db.username}" />
			<property name="username" value="${europrices.db.password}" />
			<property name="storage">
				<bean class="com.danidemi.jlubricant.embeddable.hsql.FileSystemStorage">
					<property name="dbFolder" value="${europrices.db.path}" />
				</bean>
			</property>
		</bean>

	</beans>
	
	

	
	<beans profile="scraper">

		<!-- ========================================================== -->
		<!-- Tasks                                                      -->
		<!-- ========================================================== -->
		<task:scheduled-tasks scheduler="myScheduler">
			<task:scheduled ref="task" method="run" trigger="trigger" />
		</task:scheduled-tasks>
		
		<task:scheduler id="myScheduler" pool-size="10" />	
	
		<!-- ========================================================== -->
		<!-- Scraping                                                   -->
		<!-- ========================================================== -->
				
		<bean id="task" class="com.danidemi.europrice.tasks.ModularScreenScrapingTask" lazy-init="true">
			<property name="callback" ref="callback" />
			<property name="ctxFactory">
				<bean class="com.danidemi.jlubricant.screenscraping.context.PhantomjsFactory">
					<property name="enableProxy" value="${europrices.phantomjs.proxy.enabled}" />
					<property name="proxyHost" value="${europrices.phantomjs.proxy.host}" />
					<property name="proxyPort" value="${europrices.phantomjs.proxy.port}" />
					<property name="pathToPhantomJsExecutable" value="${europrices.phantomjs.executable}" />
					<property name="port" value="${europrices.phantomjs.port}" />
				</bean>
			</property>
			<property name="iterators">
				<list>
					<bean class="com.danidemi.europrice.utils.FixedIterator">
						<property name="scrapers">
							<list>
								<bean class="com.danidemi.europrice.pricegrabber.screenscraping.shops.StockistiScraper" />
								<bean class="com.danidemi.europrice.pricegrabber.screenscraping.shops.UtuizamobiScrapeAction" />
								<bean class="com.danidemi.europrice.pricegrabber.screenscraping.shops.OSelectionScrapeAction" />
								<bean class="com.danidemi.europrice.pricegrabber.screenscraping.shops.BigShopLv" />
							</list>
						</property>
						<property name="requests">
							<list>
								<value>asus</value>
								<value>blackberry</value>
								<value>htc</value>
								<value>huawei</value>
								<value>iphone</value>
								<value>lenovo</value>
								<value>lg</value>
								<value>lumia</value>
								<value>meizu</value>
								<value>moto</value>
								<value>nexus</value>
								<value>nokia</value>
								<value>oppo</value>
								<value>pantech</value>
								<value>samsung</value>
								<value>seven</value>
								<value>sony</value>
								<value>vivo</value>
								<value>xiaomi</value>
							</list>
						</property>
					</bean>
				</list>
			</property>
		</bean>
		
		<bean name="trigger1" class="org.springframework.scheduling.support.PeriodicTrigger">
			<constructor-arg value="1" />
			<constructor-arg value="DAYS" />
			<property name="fixedRate" value="false" />
		</bean>

		<bean name="triggerN"
			class="com.danidemi.jlubricant.spring.context.trigger.NeverTrigger" />

		<alias alias="trigger" name="${europrices.scraping.trigger}" />
	</beans>

</beans>